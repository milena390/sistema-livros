# Teste Unit√°rio N√£o Funcional ‚Äì Fun√ß√£o `calcularMedia()`

## Objetivo:
Validar requisitos n√£o funcionais da fun√ß√£o `calcularMedia(valores: List[float]) -> float`.

### Requisitos:

- ‚è±Ô∏è **Desempenho**:
  - A fun√ß√£o deve ser executada em menos de 10ms para uma lista de at√© 10.000 elementos.

- üõë **Tratamento de Erros**:
  - Deve lan√ßar `ValueError` se a lista estiver vazia.

- üîí **Seguran√ßa (m√≠nima)**:
  - A fun√ß√£o n√£o deve modificar a lista original (imutabilidade).

### Resultados:
| Requisito         | Resultado | Observa√ß√µes              |
|-------------------|-----------|--------------------------|
| Desempenho        | OK        | Tempo m√©dio: 7.4ms       |
| Tratamento de Erros | OK        | Exce√ß√£o capturada com sucesso |
| Seguran√ßa          | OK        | Lista original intacta   |

### Ambiente de Teste:
- Python 3.11
- Plataforma: Linux
- Framework: pytest + timeit






Nome do Teste: test_somar_numeros
Objetivo: Verificar se a fun√ß√£o somar retorna o valor correto
Fun√ß√£o testada: somar(a: int, b: int) -> int
Entrada: a = 2, b = 3
Sa√≠da esperada: 5
Resultado: Passou
Ferramenta: pytest


Cen√°rio: Login com sucesso
Pr√©-condi√ß√£o: Usu√°rio 'joao@email.com' cadastrado com senha '1234'
Passos:
  1. Acessar a tela de login
  2. Inserir email e senha
  3. Clicar em "Entrar"
Resultado Esperado: Usu√°rio redirecionado para a p√°gina inicial
Resultado: OK
Ferramenta: Selenium
